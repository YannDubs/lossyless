import logging
import math
import urllib.request
import zipfile
from pathlib import Path

from tqdm import tqdm

import torch
from torchvision.transforms import functional as F_trnsf

logger = logging.getLogger(__name__)


class DownloadProgressBar(tqdm):
    """Progress bar for downlding files."""

    def update_to(self, b=1, bsize=1, tsize=None):
        if tsize is not None:
            self.total = tsize
        self.update(b * bsize - self.n)


# Modified from https://stackoverflow.com/questions/15644964/python-progress-bar-and-downloads
def download_url(url, save_dir):
    """Download a url to `save_dir`."""
    filename = url.split("/")[-1]
    save_dir = Path(save_dir)
    save_dir.mkdir(parents=True, exist_ok=True)

    with DownloadProgressBar(
        unit="B", unit_scale=True, miniters=1, desc=url.split("/")[-1]
    ) as t:

        urllib.request.urlretrieve(
            url, filename=save_dir / filename, reporthook=t.update_to
        )


def unzip(filename, is_rm=True):
    """Unzip file and optionally removes it."""
    filename = Path(filename)
    with zipfile.ZipFile(filename, "r") as zip_ref:
        zip_ref.extractall(filename.parent)
        if is_rm:
            filename.unlink()


def rotate(x, angle):
    """Rotate a 2D tensor by a certain angle (in degrees)."""
    angle = torch.as_tensor([angle * math.pi / 180])
    cos, sin = torch.cos(angle), torch.sin(angle)
    rot_mat = torch.as_tensor([[cos, sin], [-sin, cos]])
    return x @ rot_mat


def int_or_ratio(alpha, n):
    """Return an integer for alpha. If float, it's seen as ratio of `n`."""
    if isinstance(alpha, int):
        return alpha
    return int(alpha * n)


def npimg_resize(np_imgs, size):
    """Batchwise resizing numpy images."""
    if np_imgs.ndim == 3:
        np_imgs = np_imgs[:, :, :, None]

    torch_imgs = torch.from_numpy(np_imgs.transpose((0, 3, 1, 2))).contiguous()
    torch_imgs = F_trnsf.resize(torch_imgs, size=size)
    np_imgs = torch_imgs.numpy().transpose((0, 2, 3, 1))
    return np_imgs


# balancing weights can be computed by
# Y_test = [dm.test_dataset[i][1] for i in range(len(dm.test_dataset))]
# values, counts = np.unique(Y_test, return_counts=True)
# {v:len(counts)/(c) for v,c in zip(values,counts)}
Flowers102BalancingWeights = {
    "is_eval": True,  # says that computed on test set
    0: 4.434782608695652,
    1: 1.2,
    2: 1.7586206896551724,
    3: 1.3421052631578947,
    4: 3.923076923076923,
    5: 3.5172413793103448,
    6: 0.9532710280373832,
    7: 3.0,
    8: 2.217391304347826,
    9: 1.5692307692307692,
    10: 1.146067415730337,
    11: 3.0,
    12: 3.642857142857143,
    13: 3.5172413793103448,
    14: 5.1,
    15: 0.9444444444444444,
    16: 2.372093023255814,
    17: 2.0,
    18: 1.2439024390243902,
    19: 1.4366197183098592,
    20: 1.6451612903225807,
    21: 5.1,
    22: 1.1590909090909092,
    23: 3.1875,
    24: 3.4,
    25: 1.108695652173913,
    26: 1.5223880597014925,
    27: 1.5454545454545454,
    28: 1.4166666666666667,
    29: 4.857142857142857,
    30: 0.7611940298507462,
    31: 2.6153846153846154,
    32: 2.372093023255814,
    33: 2.2666666666666666,
    34: 5.1,
    35: 0.7183098591549296,
    36: 0.6986301369863014,
    37: 1.4366197183098592,
    38: 4.08,
    39: 2.1702127659574466,
    40: 1.7586206896551724,
    41: 1.0851063829787233,
    42: 2.8333333333333335,
    43: 4.857142857142857,
    44: 4.08,
    45: 4.857142857142857,
    46: 2.8333333333333335,
    47: 2.55,
    48: 0.918918918918919,
    49: 1.8214285714285714,
    50: 2.914285714285714,
    51: 3.5172413793103448,
    52: 2.1702127659574466,
    53: 0.8717948717948718,
    54: 3.923076923076923,
    55: 2.372093023255814,
    56: 2.217391304347826,
    57: 2.1702127659574466,
    58: 5.1,
    59: 1.6451612903225807,
    60: 3.923076923076923,
    61: 5.1,
    62: 1.1724137931034482,
    63: 2.1702127659574466,
    64: 2.4878048780487805,
    65: 3.5172413793103448,
    66: 0.44155844155844154,
    67: 2.0,
    68: 1.6451612903225807,
    69: 0.42857142857142855,
    70: 2.6153846153846154,
    71: 1.146067415730337,
    72: 5.1,
    73: 1.3972602739726028,
    74: 1.3972602739726028,
    75: 5.1,
    76: 1.5692307692307692,
    77: 4.636363636363637,
    78: 0.6754966887417219,
    79: 1.8545454545454545,
    80: 4.857142857142857,
    81: 3.1875,
    82: 1.5223880597014925,
    83: 3.642857142857143,
    84: 4.636363636363637,
    85: 2.217391304347826,
    86: 2.4878048780487805,
    87: 2.8333333333333335,
    88: 1.5692307692307692,
    89: 0.9272727272727272,
    90: 1.02,
    91: 4.08,
    92: 4.857142857142857,
    93: 2.6842105263157894,
    94: 2.4285714285714284,
    95: 2.6842105263157894,
    96: 0.5795454545454546,
    97: 0.5862068965517241,
    98: 0.6219512195121951,
    99: 1.5692307692307692,
    100: 3.0,
    101: 3.5172413793103448,
}


Pets37BalancingWeights = {
    "is_eval": True,  # says that computed on test set
    0: 0.37755102040816324,
    1: 0.37,
    2: 0.37,
    3: 0.42045454545454547,
    4: 0.37,
    5: 0.38144329896907214,
    6: 0.37,
    7: 0.37,
    8: 0.37,
    9: 0.37,
    10: 0.37,
    11: 0.37,
    12: 0.37,
    13: 0.37,
    14: 0.37,
    15: 0.37,
    16: 0.37373737373737376,
    17: 0.37,
    18: 0.37,
    19: 0.37,
    20: 0.37,
    21: 0.37,
    22: 0.37,
    23: 0.37,
    24: 0.37373737373737376,
    25: 0.37,
    26: 0.37,
    27: 0.37,
    28: 0.37,
    29: 0.37,
    30: 0.37,
    31: 0.37,
    32: 0.37373737373737376,
    33: 0.37,
    34: 0.4157303370786517,
    35: 0.37,
    36: 0.37,
}

Caltech101BalancingWeights = {
    "is_eval": True,  # says that computed on test set
    0: 4.08,
    1: 0.13246753246753246,
    2: 8.5,
    3: 8.5,
    4: 0.2334096109839817,
    5: 6.0,
    6: 4.25,
    7: 6.375,
    8: 34.0,
    9: 1.0408163265306123,
    10: 1.5,
    11: 7.846153846153846,
    12: 1.8545454545454545,
    13: 1.6721311475409837,
    14: 5.1,
    15: 7.846153846153846,
    16: 1.096774193548387,
    17: 6.0,
    18: 3.5172413793103448,
    19: 3.1875,
    20: 1.3246753246753247,
    21: 6.0,
    22: 2.6153846153846154,
    23: 2.372093023255814,
    24: 2.55,
    25: 5.1,
    26: 4.857142857142857,
    27: 3.7777777777777777,
    28: 2.7567567567567566,
    29: 4.636363636363637,
    30: 2.914285714285714,
    31: 2.6842105263157894,
    32: 2.2666666666666666,
    33: 3.0,
    34: 4.434782608695652,
    35: 3.0,
    36: 1.8545454545454545,
    37: 0.2518518518518518,
    38: 0.2518518518518518,
    39: 2.7567567567567566,
    40: 2.7567567567567566,
    41: 6.8,
    42: 25.5,
    43: 25.5,
    44: 4.857142857142857,
    45: 1.4782608695652173,
    46: 1.457142857142857,
    47: 8.5,
    48: 4.25,
    49: 1.7586206896551724,
    50: 2.04,
    51: 102.0,
    52: 3.0,
    53: 1.8214285714285714,
    54: 1.2142857142857142,
    55: 3.2903225806451615,
    56: 2.0,
    57: 0.6,
    58: 2.125,
    59: 9.272727272727273,
    60: 2.8333333333333335,
    61: 7.846153846153846,
    62: 10.2,
    63: 1.7894736842105263,
    64: 51.0,
    65: 2.217391304347826,
    66: 0.1328125,
    67: 4.08,
    68: 20.4,
    69: 11.333333333333334,
    70: 6.0,
    71: 12.75,
    72: 6.8,
    73: 4.434782608695652,
    74: 25.5,
    75: 3.7777777777777777,
    76: 1.9615384615384615,
    77: 3.5172413793103448,
    78: 5.368421052631579,
    79: 10.2,
    80: 3.090909090909091,
    81: 11.333333333333334,
    82: 1.8888888888888888,
    83: 3.7777777777777777,
    84: 20.4,
    85: 3.0,
    86: 6.8,
    87: 1.8214285714285714,
    88: 3.5172413793103448,
    89: 3.0,
    90: 20.4,
    91: 1.8545454545454545,
    92: 5.368421052631579,
    93: 1.8214285714285714,
    94: 2.2666666666666666,
    95: 0.4880382775119617,
    96: 14.571428571428571,
    97: 3.5172413793103448,
    98: 25.5,
    99: 3.923076923076923,
    100: 11.333333333333334,
    101: 3.4,
}
